admin_email: werwer@sdfsd.de
admin_password: sdfsdf
admin_username: werwer
apps:
- client_id: snfoinosinefsef
  client_secret: 9noinfpuisenfpsiuenfpiosenfiusef
  client_type: public
  grant_type: authorization-code
  identifier: github.io.jhnnsrs.orkestrator
  name: orkestrator
  redirect_uris:
  - http://localhost:8090
  - http://localhost:6789/callback
  - http://localhost:6789
  scopes:
  - read
  - write
  tenant: sdfsdf
  token: 09bc6bdec889cad035bc2bb5db341650f05207d31e5b1a99886133b18cb3a3db7aab8852f48905ef66444ddff256481d53f857629ff7f6bc3802462d74d93fc1654822656e82dfc342a63695217da1f9168ba7fc4b01f5df54d698491d61990dd82ccbb8
  version: latest
- client_id: soinfosienfsfosefghsegfisnefoisneofinsef
  client_secret: soinfoefsefssdfienfoisnefoisneofinsef
  client_type: public
  grant_type: authorization-code
  identifier: github.io.jhnnsrs.doks
  name: doks
  redirect_uris:
  - http://localhost:8090
  scopes:
  - read
  - write
  tenant: sdfsdf
  token: 2e9de92e138bcedb4a0b6e65ccf64db0e6a79ed0e99cf2a2794909878b1d89464b23beed3324e6c41288ee49a6990d850ad5f9f50e0af053400afc6759844e9af1abe66b20a6b8cbc909112e6a26e22ae9ce2e1c04a749f7e2b251b13bef5ab9f9ecc375
  version: latest
- client_id: soinfosienfoisnseghsggegefoisneofinsef
  client_secret: soinfosienesfseffoisnefoisneofinsef
  client_type: public
  grant_type: authorization-code
  identifier: github.io.jhnnsrs.mikroj
  name: MikroJ
  redirect_uris:
  - http://localhost:8090
  scopes:
  - read
  - write
  tenant: sdfsdf
  token: 081ba6917aa1073cbcb128f12ed7ea9e9d124e177a07399e4bcd583bd5157af6cb400a5db0d6fa61b9f7c8015e5a0268b1fe872d997aa93b0c8a79934fffa0b7fce0604daac330c1b119a6c20a82e9ff0ea42804641da360fc1f2c8ab7de168030f208cc
  version: latest
- client_id: soinfosienfoaswdasdasdisnefoisneofinsef
  client_secret: soinfosiengeesegegfoisnefoisneofinsef
  client_type: public
  grant_type: authorization-code
  identifier: github.io.jhnnsrs.mikromanager
  name: MikroManager
  redirect_uris:
  - http://localhost:8090
  scopes:
  - read
  - write
  tenant: sdfsdf
  token: a002b762cbe1c125cbb6ee836eae2de8f7a4dd466b0154ab0f3a2fa0b44c5cb520b15ce032d44d9ecfdbfac7c993effdf860ee16ab1eaa67f3bfec9d7d59a9d0cfe566468b75dd0d9a5c2ef3159a5418fbad76217433054621e4ceedd97ad406e74e6d7d
  version: latest
- client_id: soinfosienfoissgsegsegtbsynefoisneofinsef
  client_secret: soinfosienfoissdfsdfnefoisneofinsef
  client_type: public
  grant_type: authorization-code
  identifier: github.io.jhnnsrs.mikro-napari
  name: napari
  redirect_uris:
  - http://localhost:8090
  scopes:
  - read
  - write
  tenant: sdfsdf
  token: 70dbbdcdc301bba9eacf91d28d60e8d90dd36c6a2786ece5cb7974db373b5c3326830bba737b49c7065b91be5f093ab0b4573c07fce327e57ec7e0b70a6f20c09d02e5710a4a128c915302a2fe068b90e3963f69d5dab4993bb3d6beb22e89f23786be79
  version: latest
groups:
- description: My standard team
  name: myteam
multiplatform: false
name: defaultddd
network: null
services:
- dependencies: {}
  description: The pubsub
  dev: null
  host: redis
  interface: redis
  long: This allows services to publish and subscribe to events
  name: redis
  port: 6379
  requires: []
- dependencies: {}
  description: The orkestrator
  dev: null
  host: orkestrator
  interface: orkestrator
  long: This allows orkestrator to publish and subscribe to events
  name: orkestrator
  port: 80
  public_port: 6789
  requires: []
- databases: []
  dependencies: {}
  description: The database
  dev: null
  host: db
  interface: db
  long: Storing your meta data
  name: postgres
  password: afeabc19e89aa6e2b33ead511169990d
  port: 5432
  requires: []
  username: craggymaroondodo
- buckets: []
  dashboard_port: 9001
  dependencies: {}
  description: The storage
  dev: null
  host: minio
  init_image: jhnnsrs/init:prod
  interface: minio
  long: Storing your images and files
  name: minio
  port: 9000
  public_dashboard_port: 9001
  public_port: 9000
  requires: []
  root_password: 24e8a3b4b5a46e9a2951f7956c269187
  root_username: wiggycyanneanderthal
  users: []
  with_dashboard: false
- dependencies: {}
  description: The backbone
  dev: null
  host: rabbitmq
  interface: rabbitmq
  long: Taking care of the reliable communication between the apps
  name: rabbitmq
  password: guest
  port: 5672
  requires: []
  username: guest
- activation_days: 7
  dependencies: {}
  description: The core
  dev: null
  host: lok
  interface: lok
  issuer: lok
  key_type: RS256
  long: This includes authorization, authentificaiton, config management, and more
  name: lok
  port: 8000
  private_key: '-----BEGIN PRIVATE KEY-----

    MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC9OsQIRdZqqY5p

    bLDliNO48rHXfrsrj6x93HABOrlE5Gk64mqh+YPk59+VQiVqSdT4YB/vB2+lzQyj

    50oSa+Y2K6Rk7lgQoCBDzLw+xjhbcd32UISpQ+AeLw4pYwa24Qpr+xhYb01Ajy/B

    s9rBn0c9kPXRGrffGgl2P4z9Ni9tAbnM1bKUeDoGNQ2XLrQqPQ3t9I6gtRbQnId6

    SBju939nktDAH12wdkqPgddMVKj/2brjhqN7IGXJcZXdttONidWljMmDNgKyj8Ln

    8Rjc4Cfc0jDevxAeHOsj6cH7/vLglEXRqXYclCBAL/M8guV9J8kkVr1BYuQRjw20

    wKWXGwz1AgMBAAECggEAEXL4DSg9dZ/1fyCz7jKQDXOptQydX060EfYQCPj8iQ8D

    6hdjTFTZFfRQwG91SkgNIKsifrThlXkjQ4DqKmkzNQcQtXLqAXx2hTH9oM8/9qS5

    GkPB++bDpZzisivMvHPjdWIV1F/NEJkzhunaD/UrSVDS7gmH74Vz3mjNTDMhK+yu

    UKnBQTwYcLtVX6bDObxlOP+d6NkJzL6WIhLKIJ2VYN05T4xatA9ZBOt/FgcBFX7h

    z56QlVbkcFtwPSh8JbxWcpLd6j469hydTszeAI0y4rb4jF6WZo7LvvYcykV37woJ

    EzRwd4QRJHT3+OuMCQu3U7yJb4N0fBMfRxhJ8cg6SQKBgQDwbCc8qxtRvWanC8Rb

    GyMLpAkSmiseKmLswSLUMBXbvyIyD3pYbVo7hHR5FqThPEVvNM0hVI4mEKyNRhtr

    jbI6WXPkOHGTlgK5gDyPiY3wo+oMkKRkAT6umrywgxD81Fp0z/XUoVULaBjV4s+7

    3wFpH6U5eU02ztsGmXTTTJuoPQKBgQDJfXv1c4qQwIdmBrvowlvko+xbVa7ENGJB

    WDycmK8J+S0ezN8WVl8KCzXde7d21SvXQJyWlV5Ko/GVP7VcXKKi+p+FOPgrci5c

    1CdCXPXe5xIhxSpdx9HHq9gc0c2eww7+sZiIkHUYkiWlx5r/UOoh0BC0NYIyKvyp

    mG29mDELGQKBgG5r/glrPPzp1H/cc660ZAAwssoMbMlKBm1etzRlcWSgAIClgzeh

    4dN8HlKPB+M631kYEy6/uxnYhqfMD0PyrG0IMKYdFm0GdPHl5+q07rAbWJ+0vwv/

    Vl6zSv529BJrJbCI4wtpnbnDccSqi2ZqIie6FRS0lbYag5YgXPu/L66xAoGBAKC0

    XBz+BaPEW3nNnyxbcI2hDNAgO98z5LY3mUhRIzLyMcGiJ8CaLP1GybSYi1DVXz00

    xG/6PJWNww6GHLHJFNKm0HqiYJXOYRobACEXIeeiJz0WE99uk2wNLLZ3w+d/rkMI

    BR/PEAYD8tERrhc7QzKqz9fb4bb/wDvIXqbcbylpAoGACALqd+IfqOuylFGDD97I

    9Ql3TvUosT5REkYujO646Gd7E2I9v1XQ7eoc4Nn+bFbg2XIq9QYyfr5m+UZUbQ5C

    MwCQy8Uv5+4Nr+/8JQndhnD24Mmf0n3dtSz4Af1S00Kv+46YnnuPhNPIGuywNJAX

    Asif+g9RY1j1lgS27ebnAIk=

    -----END PRIVATE KEY-----

    '
  public_key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9OsQIRdZqqY5pbLDliNO48rHXfrsrj6x93HABOrlE5Gk64mqh+YPk59+VQiVqSdT4YB/vB2+lzQyj50oSa+Y2K6Rk7lgQoCBDzLw+xjhbcd32UISpQ+AeLw4pYwa24Qpr+xhYb01Ajy/Bs9rBn0c9kPXRGrffGgl2P4z9Ni9tAbnM1bKUeDoGNQ2XLrQqPQ3t9I6gtRbQnId6SBju939nktDAH12wdkqPgddMVKj/2brjhqN7IGXJcZXdttONidWljMmDNgKyj8Ln8Rjc4Cfc0jDevxAeHOsj6cH7/vLglEXRqXYclCBAL/M8guV9J8kkVr1BYuQRjw20wKWXGwz1
  public_port: 8000
  required_buckets:
  - name: lokmedia
  required_policies:
  - readwrite
  requires:
  - redis
  - db
  - minio
  scopes:
    can_assign: Can Assign Nodes
    can_create: Can Create Nodes
    can_create_identifier: Can create new identifier for the platform
    can_forward_bounce: Can reserve and assign to Nodes mimicking other Users (only
      backend and admin)
    can_provide: Can Provide Nodes
    can_template: Can Template Nodes
    introspection: Introspect the Token scope
    provider: Can act as a provider
    read: Reading all of your Data
    read_starred: Reading all of your shared Data
  token_expire_seconds: 604800
- dependencies: {}
  description: The datalayer
  dev: null
  host: mikro
  interface: mikro
  long: Enables you to store, organize and monitor microscopy data
  name: mikro
  port: 8080
  public_port: 8080
  required_buckets:
  - name: zarr
  - name: parquet
  - name: mikromedia
  required_policies:
  - readwrite
  requires:
  - redis
  - lok
  - db
  - minio
- dependencies: {}
  description: The broker
  dev: null
  host: rekuest
  interface: rekuest
  long: Allows you to call enabled bioimage apps from the platform
  name: rekuest
  port: 8090
  public_port: 8090
  requires:
  - redis
  - rabbitmq
  - lok
  - db
- dependencies: {}
  description: The designer
  dev: null
  host: fluss
  image: jhnnsrs/fluss:prod
  interface: fluss
  long: Allows you to design universal workflows spanning multiple apps
  name: fluss
  port: 8070
  public_port: 8070
  required_buckets:
  - name: flussmedia
  required_policies:
  - readwrite
  requires:
  - redis
  - lok
  - db
  - minio
- dependencies: {}
  description: The virtualizer
  dev: null
  host: port
  interface: port
  long: Enables one click install of github repos as internal apps
  name: port
  network_name: null
  port: 8050
  public_port: 8050
  required_buckets:
  - name: portmedia
  required_policies:
  - readwrite
  requires:
  - redis
  - lok
  - db
  - minio
users:
- email: sdfsdf@sdfs.de
  groups:
  - myteam
  password: sdfsdf
  username: sdfsdf
